# Modify this code to update the DB schema diagram.
# To reset the sample schema, replace everything with
# two dots ('..' - without quotes).

# Features Currently Out Of Scope for the MVP
# what about mid-leveld?
# what about the "Am I at the front door where I am covered" problem?
# Which is a permutation of "Am I at the front door"
# What about patients complaining about "never there" providers for network adequacy
# What else should patients/public be able to complain about?
# What about the search by "Mayo Clinic" brand search problem?
# What about the "right doctor wrong EHR endpoint" problem?
# What about the "excluded provider at TIN" problem?
# What about plan formularies? Do you want to be able to search for a medication and get a plan back?
# What about provider schedules?
# What about provider avaiiaiblity?


################################################
# Totally New
###########

Users
---
id INT PK
Email varchar
FirstName varchar
LastName varchar
IdentityVerified boolean


UserAccessRole
-------
id INT PK
User_id INT FK >- Users.id
Role_id INT FK >- Roles.id
AccessToNPI INT FK >- NPI.npi

Roles
---
id INT PK
Role varchar(100) 
# Can be: 
# self_accessing_own_personal_NPI, 
# employer_managing_person_NPI, 
# person_managing_org_NPI, 
# person_owner_org_NPI, 
# service_managing_NPI, 
# CMSadmin_managing_NPI

HealthcareBrand
-----------
id PK int(10)
HealthcareBrand_name VARCHAR(200)
TrademarkSerialNumber VARCHAR(20)

OrganizationToHealthcareBrand
------------------------
id PK  int(10)
HealthcareBrand_id INT FK >- HealthcareBrand.id 
Organization_id INT FK >- Organization.id


################################################
# SOURCED FROM Payer FHIR / JSON Data or from the PUFs/Google Searches etc. 
###########

PayerToEndpoint
------
PayerID int FK >- Payer.PayerID
EndpointID FK >- Endpoint.id

Payer
---
PayerID int PK #marketplace/network-puf.IssuerID
PayerName varchar #marketplace/plan-attributes-puf.IssuerMarketPlaceMarketingName

Plans #There are a lot of atributes for plans, not sure how much we need to include
---
PlanID int PK #marketplace/plan-attributes-puf.PlanId
IssuingPayerID int FK >- Payer.PayerID
MarketCoverageID int FK - MarketCoverage.ID 
ServiceAreaId varchar FK - ServiceArea.ID #marketplace/plan-attributes-puf.ServiceAreaId
DentalOnlyPlan boolean #marketplace/plan-attributes-puf.DentalOnlyPlan
PlanMarketingName varchar #marketplace/plan-attributes-puf.PlanMarketingName
HIOSProductID varchar #marketplace/plan-attributes-puf.HIOSProductId
PlanTypeID int FK >- PlanTypes.ID
IsNewPlan boolean #marketplace/plan-attributes-puf.IsNewPlan

PlanTypes
---
ID int PK
PlanType varchar #marketplace/plan-attributes-puf.PlanType

MarketCoverage
---
ID int PK
MarketCoverage varchar #marketplace/plan-attributes-puf.MarketCoverage


NetworksToPlans
----
PlanID int Fk >- Plans.PlanID
NetworkID int Fk >- Networks.NetworkID 

Networks
---
NetworkID int PK #marketplace/network-puf.NetworkID
NetworkName varchar #marketplace/network-puf.NetworkName
NetworkURL varchar #marketplace/network-puf.NetworkURL

ServiceArea
---
ID PK #marketplace/plan-attributes-puf.ServiceAreaId
ServiceAreaName varchar #marketplace/service-area-puf.ServiceAreaName
StateCode varchar #marketplace/service-area-puf.StateCode
shape geometry #wishlist

################################################
# PECOS Sourced initially, then UX Maintained
##### 
NetworkToOrg
---------
NetworkID int Fk >- Networks.NetworkID
Organization_id int Fk >- Organization.id



OrgToEndpoint
----
Organization_id int Fk >- Organization.id
EndpointID FK >- Endpoint.id


EHR_to_NPI
-------
NPI int FK >- NPI.NPI
EHR_ID int FK >- EHR.EHR_ID


EHR
---
EHR_ID int pk
CHPL_ID VARCHAR(200) # Sourced from CHPL data here https://chpl.healthit.gov/#/search

################################################
## Address Tables
# There are multiple sources for addresses: NPPES, PECOS, Multiple claims flow service locations, Payer FHIR servers, etc. 
# Then we feed these throught the International or US Smarty API and keep all of the results. 
#########

Address
-----
id PK INT
address_name VARCHAR(200) # Required for FHIR Locations
barcode_delivery_code VARCHAR(12)
smarty_key VARCHAR(10)
Address_Type_id INT FK >- Address_Type_LUT.id
address_us_id INT NULL FK >- address_us.id
address_international_id INT NULL FK >- address_international.id
address_nonstandard_id INT NULL FK >- address_nonstandard.id

Address_US
-----
id PK INT
address_id INT FK >- Address.id
input_id VARCHAR(36)
input_index INT
candidate_index INT
addressee VARCHAR(64)
delivery_line_1 VARCHAR(64)
delivery_line_2 VARCHAR(64)
last_line VARCHAR(64)
delivery_point_barcode VARCHAR(12)
urbanization VARCHAR(64)
primary_number VARCHAR(30)
street_name VARCHAR(64)
street_predirection VARCHAR(16)
street_postdirection VARCHAR(16)
street_suffix VARCHAR(16)
secondary_number VARCHAR(32)
secondary_designator VARCHAR(16)
extra_secondary_number VARCHAR(32)
extra_secondary_designator VARCHAR(16)
pmb_designator VARCHAR(16)
pmb_number VARCHAR(16)
city_name VARCHAR(64)
default_city_name VARCHAR(64)
state_abbreviation CHAR(2)
State_id INT FK >- State_Code_LUT.id
zipcode CHAR(5)
plus4_code VARCHAR(4)
delivery_point CHAR(2)
delivery_point_check_digit CHAR(1)
record_type CHAR(1)
zip_type VARCHAR(32)
county_fips CHAR(5)
county_name VARCHAR(64)
ews_match CHAR(5)
carrier_route CHAR(4)
congressional_district CHAR(2)
building_default_indicator CHAR(1)
rdi VARCHAR(12)
elot_sequence VARCHAR(4)
elot_sort VARCHAR(4)
latitude DECIMAL(9,6)
longitude DECIMAL(9,6)
coordinate_license INT
precision VARCHAR(18)
time_zone VARCHAR(48)
utc_offset DECIMAL(4,2)
dst CHAR(5)
dpv_match_code VARCHAR(1)
dpv_footnotes VARCHAR(32)
dpv_cmra VARCHAR(1)
dpv_vacant VARCHAR(1)
dpv_no_stat VARCHAR(1)
active VARCHAR(1)
footnotes VARCHAR(24)
lacslink_code VARCHAR(2)
lacslink_indicator VARCHAR(1)
suitelink_match VARCHAR(5)
enhanced_match VARCHAR(64)

Address_International
-----
id PK INT
address_id INT FK >- Address.id
input_id VARCHAR(36)
country VARCHAR(64)
geocode VARCHAR(4)
language VARCHAR(6)
freeform VARCHAR(512)
address1 VARCHAR(64)
address2 VARCHAR(64)
address3 VARCHAR(64)
address4 VARCHAR(64)
organization VARCHAR(64)
locality VARCHAR(64)
administrative_area VARCHAR(32)
postal_code VARCHAR(16)
administrative_area_iso2 VARCHAR(8)
sub_administrative_area VARCHAR(64)
country_iso_3 VARCHAR(3)
premise VARCHAR(64)
premise_number VARCHAR(64)
thoroughfare VARCHAR(64)
latitude DECIMAL(9,6)
longitude DECIMAL(9,6)
geocode_precision VARCHAR(32)
max_geocode_precision VARCHAR(32)
address_format VARCHAR(128)
verification_status VARCHAR(32)
address_precision VARCHAR(32)
max_address_precision VARCHAR(32)

Address_Nonstandard
-----
id PK INT
address_id INT FK >- Address.id
raw_address TEXT
notes TEXT

################################################
## Normalized versions of NPPES Data Tables that are also FHIR requirements! 
######

Credential_LUT
--------------------
id INT PK 
Credential_acronym VARCHAR(20) # i.e. M.D.
Credential_name VARCHAR(100) # i.e. Medical Doctor
Credential_source_url VARCHAR(250) # for when there is only one source for the credential (unlike medical schools etc)

IndividualToCredential
--------
id PK int(10)
Individual_id FK >- Individual.id 
Credential_id FK >- Credential_LUT.id 


Individual
---------
id INT PK
last_name VARCHAR(100)
first_name VARCHAR(100)
middle_name VARCHAR(21)
name_prefix VARCHAR(6)
name_suffix VARCHAR(6)
email_address VARCHAR(200)
maybe_SSN VARCHAR(10)





Organization
-------------
id PK int(10)
org_legal_name VARCHAR(200)
AuthorizedOfficial_Invidual_id INT FK >- Individual.id 
ParentOrganization_id INT FK >- Organization.id 
OrganizationTIN VARCHAR(10) UNIQUE
VTIN VARCHAR(32)
OrganizationGLIEF VARCHAR(300)

NPI
-----
npi BIGINT PK
entity_type_code SMALLINT
replacement_npi VARCHAR(11)
enumeration_date DATE
last_update_date DATE
deactivation_reason_code VARCHAR(3)
deactivation_date DATE
reactivation_date DATE
certification_date DATE

NPI_Individual
-----
id INT PK 
npi BIGINT FK >- NPI.npi
Individual_id INT FK >- Individual.id 
is_sole_proprietor BOOLEAN
sex_code CHAR(1)

NPI_Organization
-----
id INT PK 
npi BIGINT FK >- NPI.npi
Organization_id INT FK >- Organization.id


Identifier_Type_LUT
-----
id  PK
identifier_type_description TEXT UNIQUE

NPI_Identifier
-----
id  PK
npi BIGINT FK >- NPI.npi
identifier VARCHAR(21)
identifier_type_code INTEGER FK >- Identifier_Type_LUT.id
state VARCHAR(3)
issuer VARCHAR(81)

Address_Type_LUT
-----
id  PK
address_type_description TEXT UNIQUE

Phone_Type_LUT
-----
id  PK
phone_type_description TEXT UNIQUE

# We keep this seperate because there are several state-data-not-address data elements we need it for. 
State_Code_LUT
-----
id  PK
state_code VARCHAR(100) UNIQUE
state_name VARCHAR(100)

Orgname_Type_LUT
-----
id  PK
orgname_description TEXT UNIQUE
source_file TEXT
source_field TEXT

Orgname
-----
id  PK
Organization_id INT FK >- Organization.id
organization_name VARCHAR(70)
orgname_type_code INTEGER FK >- Orgname_Type_LUT.id
code_description VARCHAR(100)

NPI_Address
-----
id  PK
npi BIGINT FK >- NPI.npi
address_type_id INTEGER FK >- Address_Type_LUT.id
address_id INT FK >- Address.id



NPI_Phone
-----
id  PK
npi BIGINT FK >- NPI.npi
phone_type_id INTEGER FK >- Phone_Type_LUT.id
phone_number VARCHAR(20)
is_fax BOOLEAN

NPI_Taxonomy
-----
id  PK
npi BIGINT FK >- NPI.npi
NUCC_Taxonomy_Code_id INT FK >- NUCC_Taxonomy_Code.id
license_number VARCHAR(20)
license_state_id INTEGER FK >- State_Code_LUT.id
is_primary BOOLEAN
taxonomy_group VARCHAR(10)

NPI_Identifiers
-----
id  PK
npi BIGINT FK >- NPI.npi
identifier VARCHAR(20)
type_code VARCHAR(2)
state_id INTEGER FK >- State_Code_LUT.id
issuer VARCHAR(80)

NPI_Endpoint
-----------
id  PK 
npi BIGINT FK >- NPI.npi
Endpoint_id INT FK >- Endpoint.id

Endpoint_Type_LUT
-----
id INT  PK
identifier_type_description TEXT UNIQUE

Endpoint
--------
id INT  PK
endpoint_url VARCHAR(500) # for now only FHIR and Direct
endpoint_name VARCHAR(100) # endpoint NPPES file as endpoint_description
endpoint_desc VARCHAR(100) # endpoint NPPES file as endpoint_comments
endpoint_address_id FK >- Address.id
endpoint_type_id FK >- Endpoint_Type_LUT.id

################################################
## NUCC Taxonomy Tables sourced from the NUCC PUF and the NUCC Medicare Provider Type CrossWalk

NUCC_Taxonomy_Code
-----
id  PK
parent_nucc_taxonomy_code_id INT FK >0- NUCC_Taxonomy_Code.id
taxonomy_code VARCHAR(10) UNIQUE
tax_grouping TEXT
tax_classification TEXT
tax_specialization TEXT
tax_definition TEXT
tax_notes TEXT
tax_display_name TEXT
tax_certifying_board_name TEXT 
tax_certifying_board_url TEXT

NUCC_Taxonomy_Code_Path
-----
nucc_taxonomy_code_decendant_id INT FK >- NUCC_Taxonomy_Code.id
nucc_taxonomy_code_ancestor_id INT FK >- NUCC_Taxonomy_Code.id

MedicareProviderType
-----
id INT PK 
MedicareProviderType_name VARCHAR

NUCC_MedicareProviderType
------
MedicareProviderType_id INT FK >- MedicareProviderType.id
NUCC_Taxonomy_Code_id INT FK >- NUCC_Taxonomy_Code.id